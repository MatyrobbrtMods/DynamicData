plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_name}-${minecraft_version}-fabric"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation project(":Common")
//
//    implementation("org.reflections:reflections:0.10.2") {
//        include(it)
//    }
}

loom {
    runs {
        configureEach {
            final List classPaths = [
                    project.tasks.processResources.outputs.files.asPath,
                    project.sourceSets.main.java.classesDirectory.get().asFile
            ]
            // Thanks Fabric...
            vmArgs("-Dfabric.classPathGroups=${classPaths.join(File.pathSeparator)}")
            vmArg('-Xmx3G')
            vmArg('-Dcom.matyrobbrt.dynamicdata.isDynDataDev=true')
        }
        client {
            client()
            setConfigName("Fabric Client")
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            runDir("run")
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.matyrobbrt.dynamicdata'
            artifactId = "${mod_name}-${minecraft_version}-fabric"
            version = project.version

            artifacts = [tasks.remapJar, sourcesJar]
            pom.withXml { node ->
                node.asNode().dependencies
                        .'*'
                        .findAll { it.artifactId.text().contains("${mod_name}-${minecraft_version}") }
                        .each { it.parent().remove(it) }
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = findProperty('inquisitionMavenUser') ?: ''
                password = findProperty('inquisitionMavenPassword') ?: ''
            }
        }
    }
}
